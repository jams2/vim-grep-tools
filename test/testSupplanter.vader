Execute (test detects specified filetype):
  let supplanter = supplanter#Supplanter('/pattern/ -F vim')
  AssertEqual 1, supplanter.shouldMatchFileExtension
  AssertEqual ['*.vim'], supplanter.includes

Execute (test detects filetype ignore modifier):
  let supplanter = supplanter#Supplanter('/pattern/ -f')
  AssertEqual 0, supplanter.shouldMatchFileExtension

Execute (test detects case ignore modifier):
  let supplanter = supplanter#Supplanter('/pattern/ -i')
  AssertEqual 0, supplanter.isCaseSensitive

Execute (test detects filetype ignore, both flags passed):
  let supplanter = supplanter#Supplanter('/pattern/ -i -f')
  AssertEqual 0, supplanter.shouldMatchFileExtension

Execute (test detects case ignore, both flags passed):
  let supplanter = supplanter#Supplanter('/pattern/ -i -f')
  AssertEqual 0, supplanter.isCaseSensitive

Execute (test detects case ignore, flags concatenated):
  let supplanter = supplanter#Supplanter('/pattern/ -if')
  AssertEqual 0, supplanter.isCaseSensitive

Execute (test detects filetype ignore, flags concatenated):
  let supplanter = supplanter#Supplanter('/pattern/ -if')
  AssertEqual 0, supplanter.shouldMatchFileExtension

Execute (test parses args; pattern, replacement and flags):
  let supplanter = supplanter#Supplanter('/pattern/replacement/gc')
  AssertEqual 'pattern', supplanter.word
  AssertEqual 'replacement', supplanter.replacement
  AssertEqual 'gc', supplanter.substituteFlags

Execute (test parses args; pattern only, trailing slash):
  let supplanter = supplanter#Supplanter('/pattern/')
  AssertEqual 'pattern', supplanter.word

Execute (test parses args; pattern and flags):
  let supplanter = supplanter#Supplanter('/pattern//gc')
  AssertEqual 'pattern', supplanter.word
  AssertEqual '', supplanter.replacement
  AssertEqual 'gc', supplanter.substituteFlags

Execute (test parses args; pattern, replacement and flags):
  let supplanter = supplanter#Supplanter('/pattern/replacement/gc')
  AssertEqual 'pattern', supplanter.word
  AssertEqual 'replacement', supplanter.replacement
  AssertEqual 'gc', supplanter.substituteFlags

Execute (test parses args; pattern, replacement, no flags, no trailing slash):
  let supplanter = supplanter#Supplanter('/pattern/replacement')
  AssertEqual 'pattern', supplanter.word
  AssertEqual 'replacement', supplanter.replacement
  AssertEqual '', supplanter.substituteFlags

Execute (test parses args; pattern, replacement, no flags, trailing slash):
  let supplanter = supplanter#Supplanter('/pattern/replacement/')
  AssertEqual 'pattern', supplanter.word
  AssertEqual 'replacement', supplanter.replacement
  AssertEqual '', supplanter.substituteFlags

Execute (test parses args; pattern has space):
  let supplanter = supplanter#Supplanter('/pa ttern/replacement/')
  AssertEqual 'pa ttern', supplanter.word
  AssertEqual 'replacement', supplanter.replacement
  AssertEqual '', supplanter.substituteFlags

Execute (test parses args; replacement has space):
  let supplanter = supplanter#Supplanter('/pattern/replacement /')
  AssertEqual 'pattern', supplanter.word
  AssertEqual 'replacement ', supplanter.replacement
  AssertEqual '', supplanter.substituteFlags

Execute (test parses args; pattern has slashes):
  let supplanter = supplanter#Supplanter('/pat\/tern\//replacement/')
  AssertEqual 'pat/tern/', supplanter.word
  AssertEqual 'replacement', supplanter.replacement
  AssertEqual '', supplanter.substituteFlags

Execute (test parses args; replacement has slash):
  let supplanter = supplanter#Supplanter('/pattern/\/replace\/ment/')
  AssertEqual 'pattern', supplanter.word
  AssertEqual '/replace/ment', supplanter.replacement
  AssertEqual '', supplanter.substituteFlags

Execute (test parses args; has escaped backslashes):
  let supplanter = supplanter#Supplanter('/pat\\tern/replacement/')
  AssertEqual 'pat\tern', supplanter.word
  AssertEqual 'replacement', supplanter.replacement
  AssertEqual '', supplanter.substituteFlags
