# Requires vader.vim <https://github.com/junegunn/vader.vim>


Execute (word to grep pattern):
  AssertEqual ' "\btestTerm\b"', WordToGrepPattern('testTerm')


Execute (get file type glob):
  AssertEqual '*.py', GetFileTypeGlob('py')


Execute (construct exclude dir string from globals, single dir):
  let g:supplantExcludeDirs = ['node_modules']
  AssertEqual ' --exclude-dir="node_modules"',
    \ ConstructExcludeDirArgsFromGlobalSetting()


Execute (construct exclude dir string from globals, multi dir):
  let g:supplantExcludeDirs = ['node_modules', 'staticfiles']
  AssertEqual ' --exclude-dir="node_modules" --exclude-dir="staticfiles"',
    \ ConstructExcludeDirArgsFromGlobalSetting()


Execute (construct exclude dir string from globals, no dirs):
  let g:supplantExcludeDirs = []
  AssertEqual '', ConstructExcludeDirArgsFromGlobalSetting()


Execute (construct grep command):
  let grepPattern = ' "\bpattern\b"'
  let grepFlags = ' -r -m 1 -e'
  let actual = ConstructGrepCommand(grepPattern, grepFlags)
  let expected = 'silent lgrep -r -m 1 -e "\bpattern\b" .'
  AssertEqual expected, actual


Execute (parse args with flags):
  let argString = '/oldWord/newWord/flags'
  let expected = ['oldWord', 'newWord', 'flags']
  let actual = ParseArgs(argString)
  AssertEqual expected, actual


Execute (parse args without flags):
  let argString = '/oldWord/newWord'
  let expected = ['oldWord', 'newWord', '']
  let actual = ParseArgs(argString)
  AssertEqual expected, actual


Execute (parse args without flags, and trailing slash):
  let argString = '/oldWord/newWord/'
  let expected = ['oldWord', 'newWord', '']
  let actual = ParseArgs(argString)
  AssertEqual expected, actual


Execute (parse args empty substitute field):
  let argString = '/oldWord//flags'
  let expected = ['oldWord', '', 'flags']
  let actual = ParseArgs(argString)
  AssertEqual expected, actual


Execute (parse args empty substitute field and no flags):
  let argString = '/oldWord//'
  let expected = ['oldWord', '', '']
  let actual = ParseArgs(argString)
  AssertEqual expected, actual


Execute (get case sensitive grep flags, with max count):
  AssertEqual ' -r -m1 -e', GetCaseSensitiveGrepFlags(1)


Execute (get case sensitive grep flags, no max count):
  AssertEqual ' -r -e', GetCaseSensitiveGrepFlags(-1)


Execute (get case insensitive grep flags, with max count):
  AssertEqual ' -ri -m1 -e', GetCaseInsensitiveGrepFlags(1)


Execute (get case insensitive grep flags, no max count):
  AssertEqual ' -ri -e', GetCaseInsensitiveGrepFlags(-1)


Execute (ShouldReplaceMatches with replacement and flags):
  AssertEqual 1, ShouldReplaceMatches('replacement', 'flags')


Execute (ShouldReplaceMatches with replacement, no flags):
  AssertEqual 1, ShouldReplaceMatches('replacement', '')


Execute (ShouldReplaceMatches with no replacement, flags):
  AssertEqual 1, ShouldReplaceMatches('', 'flags')


Execute (!ShouldReplaceMatches with no replacement or flags):
  AssertEqual 0, ShouldReplaceMatches('', '')


Execute (AddGrepArgs concatenates):
  let expected = 'grepCommand grepArgs'
  let actual = AddGrepArgs('grepCommand', ' grepArgs')
  AssertEqual expected, actual


Execute (ConstructIncludeArgs no inclusions):
  AssertEqual '', ConstructIncludeArgs([])


Execute (ConstructIncludeArgs throws on incorrect arg type):
  AssertThrows ConstructIncludeArgs('string')


Execute (ConstructIncludeArgs one inclusion):
  let expected = ' --include="*.py"'
  AssertEqual expected, ConstructIncludeArgs(['*.py'])


Execute (ConstructIncludeArgs multiple inclusions):
  let expected = ' --include="*.py" --include="*.html"'
  AssertEqual expected, ConstructIncludeArgs(['*.py', '*.html'])


Execute (ConstructExcludeDirArgs no globals or args):
  let g:supplantExcludeDirs = []
  let expected = ''
  AssertEqual expected, ConstructExcludeDirArgs()


Execute (ConstructExcludeDirArgs with globals, no args):
  let g:supplantExcludeDirs = ['node_modules']
  let expected = ' --exclude-dir="node_modules"'
  AssertEqual expected, ConstructExcludeDirArgs()


Execute (ConstructExcludeDirArgs with args, no globals):
  let g:supplantExcludeDirs = []
  let expected = ' --exclude-dir="node_modules" --exclude-dir="staticfiles"'
  AssertEqual expected, ConstructExcludeDirArgs('node_modules', 'staticfiles')


Execute (ConstructExcludeDirArgs with args and globals):
  let g:supplantExcludeDirs = ['node_modules']
  let expected = ' --exclude-dir="node_modules" --exclude-dir="staticfiles"'
  AssertEqual expected, ConstructExcludeDirArgs('staticfiles')
